// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentTracking.DataAccessLayer.Concrete.DBContext;

namespace StudentTracking.DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220921162631_twoMigg")]
    partial class twoMigg
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStudent", b =>
                {
                    b.Property<int>("BooksBookId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsStudentId")
                        .HasColumnType("int");

                    b.HasKey("BooksBookId", "StudentsStudentId");

                    b.HasIndex("StudentsStudentId");

                    b.ToTable("BookStudent");
                });

            modelBuilder.Entity("ExamTYTStudent", b =>
                {
                    b.Property<int>("ExamTYTsExamTYTId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsStudentId")
                        .HasColumnType("int");

                    b.HasKey("ExamTYTsExamTYTId", "StudentsStudentId");

                    b.HasIndex("StudentsStudentId");

                    b.ToTable("ExamTYTStudent");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutImage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AboutTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AboutId");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AdminName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AdminPassword")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AdminRole")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("AdminSurname")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<short>("BookPageCount")
                        .HasColumnType("smallint");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContactStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ContactSubject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContactID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Evaluation", b =>
                {
                    b.Property<int>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EvaluationContent")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EvaluationStatus")
                        .HasColumnType("bit");

                    b.Property<string>("EvaluationTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("EvaluationId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.ExamTYT", b =>
                {
                    b.Property<int>("ExamTYTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExamTYTDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamTYTName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("FenBilimleriDogru")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FenBilimleriYanlis")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MatematikDogru")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MatematikYanlis")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SosyalBilimlerDogru")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SosyalBilimlerYanlis")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TurkceDogru")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TurkceYanlis")
                        .HasColumnType("tinyint");

                    b.HasKey("ExamTYTId");

                    b.ToTable("ExamTYTs");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Lesson", b =>
                {
                    b.Property<byte>("LessonId")
                        .HasColumnType("tinyint");

                    b.Property<string>("LessonName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("LessonId")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuestionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("StudentEMail")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("StudentGender")
                        .HasColumnType("bit");

                    b.Property<string>("StudentName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudentNumber")
                        .HasColumnType("int");

                    b.Property<string>("StudentPassword")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("StudentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("StudentSurname")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<byte?>("LessonId1")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubjectId");

                    b.HasIndex("LessonId1");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("LessonId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TeacherEMail")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TeacherName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TeacherSurname")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Todo", b =>
                {
                    b.Property<int>("TodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TodoContent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("TodoFinish")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TodoFirst")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TodoStatus")
                        .HasColumnType("bit");

                    b.Property<string>("TodoTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TodoId");

                    b.HasIndex("StudentId");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("BookStudent", b =>
                {
                    b.HasOne("StudentTracking.EntityLayer.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentTracking.EntityLayer.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamTYTStudent", b =>
                {
                    b.HasOne("StudentTracking.EntityLayer.ExamTYT", null)
                        .WithMany()
                        .HasForeignKey("ExamTYTsExamTYTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentTracking.EntityLayer.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Evaluation", b =>
                {
                    b.HasOne("StudentTracking.EntityLayer.Student", "Student")
                        .WithMany("Evaluations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentTracking.EntityLayer.Teacher", "Teacher")
                        .WithMany("Evaluations")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Lesson", b =>
                {
                    b.HasOne("StudentTracking.EntityLayer.Student", "Student")
                        .WithMany("Lessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Question", b =>
                {
                    b.HasOne("StudentTracking.EntityLayer.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId");

                    b.HasOne("StudentTracking.EntityLayer.Student", "Student")
                        .WithMany("Questions")
                        .HasForeignKey("StudentId");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Student", b =>
                {
                    b.HasOne("StudentTracking.EntityLayer.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentTracking.EntityLayer.Teacher", "Teacher")
                        .WithMany("Students")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Subject", b =>
                {
                    b.HasOne("StudentTracking.EntityLayer.Lesson", "Lesson")
                        .WithMany("Subjects")
                        .HasForeignKey("LessonId1");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Todo", b =>
                {
                    b.HasOne("StudentTracking.EntityLayer.Student", "Student")
                        .WithMany("Todos")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Lesson", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Student", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Lessons");

                    b.Navigation("Questions");

                    b.Navigation("Todos");
                });

            modelBuilder.Entity("StudentTracking.EntityLayer.Teacher", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
